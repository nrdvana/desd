# This is an example of how to write a service which listens on an existing
# socket, rather than binding its own.  When you restart this app, the new
# instance first checks that it loaded successfully, and then tells Desd to
# shut down the old one, and then begins listening on the socket.
#
# This requires a specially written app.  However the code involved isn't
# complicated and it should be easy to patch most open-source projects.
---
# desd must run as root in order to bind to these ports
# However, the webserver doesn't!
handle port80: TCP:80
handle port443: TCP:443
# If you wanted to pass the file sockets to Desd using the same trick, so that
# Desd doesn't need to run as root, you could say:
# handle port80: /proc/self/fd/3
# handle port443: /proc/self/fd/4

# Define a global logger for all services (and desd itself)
# This program relays it all to syslog.
log: logger -p daemon.www

service www:
  # These environment variables tell our www daemon where to find its sockets
  env:
    WWW_DESD_COMM_FD: 3
    WWW_PORT80_FD: 4
    WWW_PORT443_FD: 5
  
  # Configure the file descriptors for all actions of this service
  io: null logger logger desd_comm port80 port443
  
  # The start action runs the webserver.
  # Note we use 'runuid' (from the Perp project) to drop root priveleges.
  # This service needs to be aware of the DESD_SV_INSTANCE environment
  # variable so it can write its temporary files to a different location
  # and not clobber the previous instance.  Of course you can also write
  # a wrapper script that uses that variable to set all sorts of other
  # environment variables and commandline switches.
  run: runuid -s www /usr/local/bin/my_webserver /srv/www

  # The reset action starts a new copy of the webserver, then performs the
  # check action on the new instance to make sure it's ready.  Then it
  # promotes the new instance to be the offical, and runs "stop" on the
  # previous instance.
  # The original file descriptors for port80 and port443 are never closed, and
  # no connection was ever rejected during this handoff.
  action restart:
    run: { internal: sv_restart_overlapped }
  
  # Note that this script probably needs to be aware of the DESD_SV_INSTANCE
  # environment variable to know how to access the new instance and not the
  # main instance.
  action check:
    run: /usr/local/bin/my_webserver_tests
